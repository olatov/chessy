@using System.Diagnostics
@using System.Text

@inject IJSRuntime _js
@inject IDialogService _dialogService
@inject IToastService _toastService

<style>
    body {
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: darkgray;
        margin: 0;
    }

    @@font-face {
        font-family: 'FreeSerif';
        src: url('FreeSerif.woff') format('woff');
        /* Add other font formats if necessary (e.g., .ttf, .otf) */
        font-weight: normal;
        font-style: normal;
    }

  .container {
      margin: 32px;
      padding: 12px !important;
      width: auto;
  }

  .reversed {
      flex-direction: column-reverse !important;
  }
</style>

<FluentCard Class="container">
    <FluentStack
        HorizontalAlignment="HorizontalAlignment.Center"
        HorizontalGap="16">

        <BoardDisplay AlwaysPromoteToQueen="@alwaysPromoteToQueen"
            Board="@position.Board"
            Disabled="@isBoardInputDisabled"
            CurrentPlayer="@position.ColorToMove"
            Flip="@flipBoard"
            OnMakeMove="@OnMakeMoveAsync"
            LastMove="@position?.Moves?.LastOrDefault()"
            ValidMoves="@validMoves"
        />

        <FluentStack Orientation="Orientation.Vertical">
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentButton
                    IconStart="@(new Icons.Regular.Size20.Chess())"
                    OnClick="OnNewGameClickAsync">New game</FluentButton>

                <FluentButton
                    IconStart="@(new Icons.Regular.Size16.ArrowRepeatAll())"
                    OnClick="@(() => { flipBoard = !flipBoard; })">Flip board</FluentButton>
            </FluentStack>

            <FluentSpacer />

            @{ var cssClass = flipBoard ? string.Empty : "reversed"; }

            <FluentStack Orientation="Orientation.Vertical" Class="@cssClass">
                <div>
                    <FluentLabel Typo="Typography.Body">White:</FluentLabel>
                    <PlayerSelector Label=""
                        Player="WhitePlayer"
                        OnChange="OnWhitePlayerChangeAsync" />
                </div>

                <div>
                    <FluentLabel Typo="Typography.Body">Black:</FluentLabel>
                    <PlayerSelector Label=""
                        Player="BlackPlayer"
                        OnChange="OnBlackPlayerChangeAsync" />
                </div>
            </FluentStack>

            <FluentSpacer />

            <FluentCheckbox @bind-Value="@alwaysPromoteToQueen" Label="Auto promote to Queen" />

            <FluentDivider Style="width: 100%;" Orientation=Orientation.Horizontal Role="DividerRole.Separator"/>

            <div class="grid" @ref="moveListElement">
                <MoveListGrid Moves="@moveList" />
            </div>

            <FluentProgress
                Width="100%"
                Stroke="ProgressStroke.Normal"
                Value="@progressCurrent"
                Max="@progressTotal">
            </FluentProgress>

            <FluentButton
                IconStart="@(new Icons.Regular.Size16.Copy())"
                OnClick="@CopyPgnToClipboard"
                disabled="@(!moveList.Any())"
                >Copy PGN</FluentButton>
        </FluentStack>
    </FluentStack>
</FluentCard>

@code {
    [Parameter]
    public Player WhitePlayer { get; set; } = new() { Type = PlayerType.Human };

    [Parameter]
    public Player BlackPlayer { get; set; } = new() { Type = PlayerType.Computer };

    private List<MoveListItem> moveList = new();

    private bool isGameOver = false;

    private bool isCurrentPlayerHuman =>
        (position.ColorToMove == PieceColor.White && WhitePlayer.IsHuman)
        || (position.ColorToMove == PieceColor.Black && BlackPlayer.IsHuman);

    private bool isBoardInputDisabled => !isCurrentPlayerHuman || isGameOver;

    private bool isComputerThinking = false;

    private CancellationTokenSource? cts = null;

    private string PgnText
    {
        get
        {
            var sb = new StringBuilder();
            foreach (var item in moveList)
            {
                if (item.White is not null)
                {
                    sb.Append($"{item.Number}. {item.White} ");
                    if (item.Black is not null)
                    {
                        sb.Append($"{item.Black} ");
                    }
                }
            }

            return sb.ToString();
        }
    }

    private Position position = new();

    private IList<string> notation = new List<string>();

    private bool alwaysPromoteToQueen = true;

    private bool flipBoard = false;

    private IList<Move> validMoves = new List<Move>();

    private int progressCurrent = 0;

    private int progressTotal = 1;

    private ElementReference moveListElement { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await StartNewGameAsync();
    }

    private async Task CopyPgnToClipboard()
    {
        await _js.InvokeVoidAsync("copyTextToClipboard", PgnText);
        _toastService.ShowInfo("Copied");
    }

    private async Task OnMakeMoveAsync(Move move)
    {
        var shortNotation = move.GetNotationVariants()
            .First(x => validMoves.Count(y => y.GetNotationVariants().Contains(x)) == 1);
        await NotateAsync(move, shortNotation);

        var moves = position.Moves;
        moves.Add(move);
        position = Position.FromMoves(moves);
        validMoves.Clear();

        await PassTurnAsync();
    }

    private async Task NotateAsync(Move move, string notation, bool isLetter = true)
    {
        if (isLetter)
        {
            notation = notation
                .Replace("♔", "K")
                .Replace("♕", "Q")
                .Replace("♖", "R")
                .Replace("♗", "B")
                .Replace("♘", "N");
        }

        if (move.Piece!.Color == PieceColor.White)
        {
            moveList[^1] = moveList[^1] with { White = notation };
            if (!(move.IsCheckmate || move.IsStalemate))
            {
                moveList[^1] = moveList[^1] with { Black = null };
            }
        }
        else
        {
            moveList[^1] = moveList[^1] with { Black = notation };
            if (!(move.IsCheckmate || move.IsStalemate))
            {
                moveList.Add(new MoveListItem(moveList.Count + 1));
            }
        }

        await ScrollMoveListAsync();
    }

    private async Task ComputerMoveAsync(PieceColor playerColor)
    {
        Console.WriteLine($"Computer move for {playerColor}");

            Console.WriteLine("Thinking task started...");
            Position positionCopy = Position.FromMoves(position.Moves);
            progressTotal = 1;
            progressCurrent = 0;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1);

            async void OnProgressChange(object? sender, FindMoveProgressEventArgs e)
            {
                progressCurrent = e.Current;
                progressTotal = e.Total;
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);
            }

            positionCopy.FindMoveProgress += OnProgressChange;

            var player = playerColor == PieceColor.White ? WhitePlayer : BlackPlayer;
            Trace.Assert(player.IsComputer);
            Trace.Assert(player.ComputerLevel.HasValue);
            int aiLevel = player.ComputerLevel.Value;

            Move? computerMove = null;
            cts = new CancellationTokenSource();
            try
            {
                isComputerThinking = true;
                computerMove = await positionCopy.FindBestMoveABAsync(playerColor, aiLevel, cts.Token);
            }
            catch (OperationCanceledException)
            {
                progressCurrent = 0;
                await InvokeAsync(StateHasChanged);
                return;
            }
            finally
            {
                cts?.Dispose();
                cts = null;
                isComputerThinking = false;
            }

            positionCopy.FindMoveProgress -= OnProgressChange;

            if (computerMove is not null)
            {
                Console.WriteLine("Computer move found: " + computerMove.GetNotationVariants().First());
                progressCurrent = progressTotal;
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);

                IEnumerable<Move> validMoves = positionCopy.GetMoves(playerColor).ToList();

                var moves = positionCopy.Moves;
                moves.Add(computerMove);

                var shortNotation = computerMove.GetNotationVariants()
                    .First(x => validMoves.Count(y => y.GetNotationVariants().Contains(x)) == 1);

                await NotateAsync(computerMove, shortNotation);

                position = Position.FromMoves(moves);

                progressCurrent = 0;
            }

            await PassTurnAsync();
    }

    private async Task PassTurnAsync()
    {
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);

        var lastMove = position.Moves.LastOrDefault();
        if (lastMove is null) { return; }

        if (position.Moves.Count > 1000)
        {
            await _dialogService.ShowInfoAsync("This goes for too long, the game abandoned.", "Draw");
            isGameOver = true;
            return;
        }

        var currentPlayer = position.ColorToMove == PieceColor.White ? WhitePlayer : BlackPlayer;

        var sw = Stopwatch.StartNew();
        var positionCopy = Position.FromMoves(position.Moves);
        validMoves = positionCopy.GetMoves(position.ColorToMove).ToList();
        if (!validMoves.Any())
        {
            if (lastMove.IsCheck)
            {
                var winner = lastMove.Piece.Color.ToString();

                _toastService.ShowInfo($"Checkmate - {winner} won.");
                isGameOver = true;
                return;
            }

            _toastService.ShowInfo("Stalemate - draw.");
            isGameOver = true;
            return;
        }

        sw.Stop();

        if (currentPlayer.IsComputer)
        {
            await ComputerMoveAsync(position.ColorToMove);
        }
    }

    private async Task OnWhitePlayerChangeAsync(Player value)
    {
        await InterruptComputerThinkingAsync();
        WhitePlayer = value;

        if (WhitePlayer.IsComputer && position.ColorToMove == PieceColor.White)
        {
            await ComputerMoveAsync(PieceColor.White);
        }
    }

    private async Task OnBlackPlayerChangeAsync(Player value)
    {
        await InterruptComputerThinkingAsync();
        BlackPlayer = value;

        if (BlackPlayer.IsComputer && position.ColorToMove == PieceColor.Black)
        {
            await ComputerMoveAsync(PieceColor.Black);
        }
    }

    public async Task ScrollMoveListAsync()
    {
        await _js.InvokeVoidAsync("scrollElementToBottom", moveListElement);
    }

    public async Task StartNewGameAsync()
    {
        await InterruptComputerThinkingAsync();
        position.ResetToStartingPosition();
        moveList.Clear();
        isGameOver = false;
        moveList.Add(new MoveListItem(1));

        switch (WhitePlayer.Type)
        {
            case PlayerType.Human:
                validMoves = position.GetMoves(PieceColor.White).ToList();
                break;

            case PlayerType.Computer:
                await ComputerMoveAsync(position.ColorToMove);
                break;

            case PlayerType.RemoteGuest:
                throw new NotImplementedException();
        }

    }

    public async Task OnNewGameClickAsync()
    {
        await StartNewGameAsync();
    }

    private async Task InterruptComputerThinkingAsync()
    {
        if (!isComputerThinking) { return; }

        Trace.Assert(cts is not null);
        cts?.Cancel();

        int steps = 10;
        while (isComputerThinking)
        {
            steps--;
            if (steps < 0)
            {
                throw new Exception("Timeout while waiting computer thinking interruption");
            }

            await Task.Delay(50);
        }
    }
}
