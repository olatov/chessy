@inject IJSRuntime _js

<style>
    .message-list {
        max-height: 10rem;
        width: 100%;
        overflow-y: scroll;
        scrollbar-width: none;
    }
</style>

<FluentCard>
    <FluentStack Orientation="Orientation.Vertical">
        <div @ref="eref" class="message-list">
            @foreach (var msg in Messages)
            {
                <p>@msg</p>
            }
        </div>
        <FluentStack>
            <FluentTextField @bind-Value="@message"
                AutoComplete="off"
                Immediate="true"
                @onkeyup="OnKeyUpAsync" />
            <FluentButton IconEnd="@(new Icons.Filled.Size16.Send())"
                OnClick="@OnSendAsync" Type="ButtonType.Submit" />
        </FluentStack>
    </FluentStack>
</FluentCard>

@code {
    [Parameter]
    public IList<string> Messages { get; set; } = new List<string>();

    [Parameter]
    public EventCallback<string> OnSendMessage { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await _js.InvokeVoidAsync("scrollElementToBottom", eref);
    }

    private string text => string.Join("\n", Messages);

    private string message = string.Empty;

    private ElementReference eref = new();

    private async Task OnSendAsync()
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await OnSendMessage.InvokeAsync(message);
        }
        message = string.Empty;
    }

    private async Task OnKeyUpAsync(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await OnSendAsync();
        }
    }
}


