@page "/"
@using Chessy.Engine.Pieces
@using Chessy.Engine.Extensions
@using Microsoft.AspNetCore.Html
@using System.Text

<style>
     body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(8, 72px);
      grid-template-rows: repeat(8, 72px);
      border: solid gray;
    }

    .square {
      width: 72px;
      height: 72px;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 72px;
      cursor: pointer;
      opacity: 1.0;
      border: none;
      font-family: cursive;
      color: black;
    }

    .selected {
        background-color: lime !important;
    }

    .lastMove {
        background-color: yellow !important;
    }

    .legalTarget {
        background-color: lime !important;

    }

    .check {
        background-color: lightcoral !important;
    }

    .checkmate {
        background-color: darkred !important;
    }

    .light {
        background-color: white;
    }

    .dark {
        background-color: lightgray;
    }
    
</style>

<PageTitle>Chessy</PageTitle>

@{
    var legalTargets = Enumerable.Empty<(int file, int rank)>();
    if (currentMove is not null)
    {
        legalTargets = validMoves.Where(x =>
                x.From.file == currentMove.From.file
                && x.From.rank == currentMove.From.rank)
            .Select(x => x.To);
        System.Console.WriteLine(legalTargets.Count());
    }
}

<div class="board">
    @foreach (int file in Enumerable.Range(0, 8))
    {
        <div class="rank">
        @foreach (int rank in Enumerable.Range(0, 8).Reverse())
        {
            var lastMove = position.Moves.LastOrDefault();

            var square = position.Board.Squares[file, rank];
            var cssClass = ((rank + file) % 2 == 0) ? "dark" : "light";

            if ((rank == currentMove?.From.rank && file == currentMove?.From.file)
                || (lastMove?.From.rank == rank && lastMove?.From.file == file)
                || (lastMove?.To.rank == rank && lastMove?.To.file == file))
            {
                cssClass += " selected";
            }

            if ((lastMove?.From.rank == rank && lastMove?.From.file == file)
                || (lastMove?.To.rank == rank && lastMove?.To.file == file))
            {
                cssClass += " lastMove";
            }

            if (legalTargets.Any(x => x.rank == rank && x.file == file))
                {
                    cssClass += " legalTarget";
                }

            
            if ((lastMove?.IsCheck ?? false) && square?.Kind == PieceKind.King && square.Color != lastMove.Piece.Color)
                {
                    cssClass += lastMove.IsCheckmate ? " checkmate" : " check";
                }

            <div class="square @cssClass" @onclick="@(() => OnCellClick(file, rank))">
                @(square?.Icon.ToUpper() ?? string.Empty)
            </div>
        }
        </div>
    }
</div>

<br />
<br />

<div style="margin: 32px;">
    @{
        var ntext = new StringBuilder();

        foreach (var i in Enumerable.Range(0, notation.Count))
        {
            if (i % 2 == 0)
            {
                ntext.Append($"{(i / 2) + 1, -5}")
                    .Append($"{notation[i], -10}");
            }
            else
            {
                ntext.AppendLine($"{notation[i], -10}");
            }
        }
    }
    
    <textarea cols="30" rows="30" readonly>@ntext</textarea>
</div>

@* <button @onclick="@OnHintClick">Hint</button>
Hint: @hint<br />

<div style="display: none;">
@foreach (var i in Enumerable.Range(0, notation.Count))
{
    if (i % 2 == 0)
    {
        @($"{(i / 2) + 1}. {notation[i]}")
    }
    else
    {
        <text>&nbsp;</text> @notation[i]<text>&nbsp;</text>
    }
}
</div> *@

@code {
    PieceColor PlayerColor = PieceColor.White;

    Position position = new Position();

    IList<string> notation = new List<string>();

    string yourMove = string.Empty;

    string hint = string.Empty;

    Move? currentMove = null;

    IList<Move> validMoves = new List<Move>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        position.ResetToStartingPosition();
        validMoves = position.GetMoves(PlayerColor, true, true).ToList();
    }

    void OnGoClick()
    {
    }

    void OnHintClick()
    {
        hint = "...";
        //     Task.Run(() =>
    //     {
        //         var move = position.FindBestMoveAB(PieceColor.White, 2);

        //         if (move is not null)
        //         {
        //             hint = $"{move.Notation}";
        //         }
        //         else
        //         {
        //             hint = "No hint";
        //         }
        //         InvokeAsync(StateHasChanged);
        //     });
    }

    void OnCellClick(int file, int rank)
    {
        if (currentMove is null)
        {
            if (position.Board.Squares[file, rank]?.Color == PlayerColor)
            {
                currentMove = new Move
                {
                    From = (file, rank),
                };
            }
        }
        else
        {
            currentMove.To = (file, rank);

            var moveIndex = validMoves.ToList().FindIndex(x =>
                x.From.file == currentMove.From.file
                && x.From.rank == currentMove.From.rank
                && x.To.file == currentMove.To.file
                && x.To.rank == currentMove.To.rank);
            if (moveIndex >= 0)
            {
                MakeMove(moveIndex);
            }
            else
            {
                hint = "Error";
            }

            currentMove = null;
        }
    }

    void MakeMove(int moveIndex)
    {
        MakeMove(validMoves[moveIndex]);
    }

    void MakeMove(Move move)
    {
        var shortNotation = move.NotationVariants
            .First(x => validMoves.Count(y => y.NotationVariants.Contains(x)) == 1);
        notation.Add(shortNotation);

        var moves = position.Moves;
        moves.Add(move);
        position = Position.FromMoves(moves);
        validMoves.Clear();

        Task.Run(() =>
        {
            var newPosition = Position.FromMoves(moves);
            validMoves = newPosition.GetMoves(PlayerColor.OpponentColor(), true, true);
            var computerMove = newPosition.FindBestMoveAB(PlayerColor.OpponentColor(), 5);
            if (computerMove is not null)
            {
                moves = newPosition.Moves;
                moves.Add(computerMove);
                shortNotation = computerMove.NotationVariants
                    .First(x => validMoves.Count(y => y.NotationVariants.Contains(x)) == 1);
                notation.Add(shortNotation);
                newPosition = Position.FromMoves(moves);
            }
            validMoves = newPosition.GetMoves(PlayerColor, true, true);
            position = newPosition;
            InvokeAsync(StateHasChanged);
        });
    }
}
