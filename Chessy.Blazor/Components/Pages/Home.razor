@page "/"
@using Chessy.Engine.Pieces
@using Chessy.Engine.Extensions
@using Microsoft.AspNetCore.Html
@using System.Text
@using Microsoft.AspNetCore.Components.QuickGrid
@using Chessy.Engine.Events

@inject IJSRuntime JS


<style>
     body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(8, 72px);
      grid-template-rows: repeat(8, 72px);
      border: solid gray;
    }

    .square {
      width: 72px;
      height: 72px;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 72px;
      cursor: pointer;
      opacity: 1.0;
      border: none;
      color: black;
      font-family: 'FreeSerif', serif;
    }

    .selected {
        background-color: rgb(108, 249, 108) !important;
    }

    .lastMove {
        background-color: yellow !important;
    }

    .legalTarget {
        background-color: rgb(105, 223, 105) !important; /* Modified color */
    }

    .check {
        background-color: lightcoral !important;
    }

    .checkmate {
        background-color: darkred !important;
    }

    .light {
        background-color: lightgray;
    }

    .dark {
        //background-color: lightgray;
        filter: brightness(95%);
    }

    .moveList {
        font-weight: bold;
        font-family: sans-serif;
    }

    .container {
        margin: 32px;
    }

    .grid {
        height: 20rem;
        overflow-y: auto;
    }

    .grid ::deep table {
        min-width: 100%;
    }

</style>

<PageTitle>Chessy</PageTitle>

@{
    var legalTargets = Enumerable.Empty<(int file, int rank)>();
    if (currentMove is not null)
    {
        legalTargets = validMoves.Where(x =>
                x.From.file == currentMove.From.file
                && x.From.rank == currentMove.From.rank)
            .Select(x => x.To);
    }
}

<div class="board">
    @foreach (int file in Enumerable.Range(0, 8))
    {
        <div class="rank">
        @foreach (int rank in Enumerable.Range(0, 8).Reverse())
        {
            var lastMove = position.Moves.LastOrDefault();

            var square = position.Board.Squares[file, rank];
            var cssClass = ((rank + file) % 2 == 0) ? "dark" : "light";

            if ((rank == currentMove?.From.rank && file == currentMove?.From.file)
                || (lastMove?.From.rank == rank && lastMove?.From.file == file)
                || (lastMove?.To.rank == rank && lastMove?.To.file == file))
            {
                cssClass += " selected";
            }

            if ((lastMove?.From.rank == rank && lastMove?.From.file == file)
                || (lastMove?.To.rank == rank && lastMove?.To.file == file))
            {
                cssClass += " lastMove";
            }

            if (legalTargets.Any(x => x.rank == rank && x.file == file))
                {
                    cssClass += " legalTarget";
                }


            if ((lastMove?.IsCheck ?? false) && square?.Kind == PieceKind.King && square.Color != lastMove.Piece.Color)
                {
                    cssClass += lastMove.IsCheckmate ? " checkmate" : " check";
                }

            <div class="square @cssClass" @onclick="@(() => OnCellClick(file, rank))">
                @(square?.Icon.ToUpper() ?? string.Empty)
            </div>
        }
        </div>
    }
</div>

<br />
<br />

<div class="container">
    <progress value="@progressCurrent" max="@progressTotal"></progress>
    <br>
    <br>

    <label>
        AI Level:
        <input type="range" min="1" max="7" @bind-value="aiLevel"  @bind-value:event="oninput" />
    </label>
    @aiLevel

    <br>
    <br>


    <div class="grid">
        <QuickGrid Items="@MoveTable" Class="moveList">
            <PropertyColumn Property="@(p => $"{p.Number}.")" Title="#" />
            <PropertyColumn Property="@(p => p.White)" />
            <PropertyColumn Property="@(p => p.Black)" />
        </QuickGrid>
    </div>

    <br>
    <br>

    <button @onclick="@CopyPgnToClipboard">Copy PGN</button>
</div>

@code {
    record MoveListItem(int Number, string White = "", string Black = "");

    int aiLevel = 4;

    IQueryable<MoveListItem> MoveTable
    {
        get
        {
            List<MoveListItem> result = new();

            @foreach (var i in Enumerable.Range(0, notation.Count))
            {
                if (i % 2 == 0)
                {

                    result.Add(new MoveListItem((i / 2) + 1, notation[i]));
                }
                else
                {
                    result[^1] = result[^1] with { Black = notation[i] };
                }
            }

            return result.AsQueryable();
        }
    }

    string PgnText
    {
        get
        {
            var asPgn = (string value) => value.Replace("♔", "K")
                .Replace("♕", "Q")
                .Replace("♖", "R")
                .Replace("♗", "B")
                .Replace("♘", "N");

            StringBuilder sb = new StringBuilder();
            foreach (var item in MoveTable)
            {
                sb.Append($"{item.Number}. {asPgn(item.White)} {asPgn(item.Black)} ");
            }

            return sb.ToString();
        }
    }

    bool showPgn = false;

    PieceColor PlayerColor = PieceColor.White;

    Position position = new Position();

    IList<string> notation = new List<string>();

    string yourMove = string.Empty;

    string hint = string.Empty;

    Move? currentMove = null;

    IList<Move> validMoves = new List<Move>();

    int progressCurrent = 0;
    int progressTotal = 1;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        position.ResetToStartingPosition();

        switch (PlayerColor)
        {
            case PieceColor.White:
                validMoves = position.GetMoves(PlayerColor, true, true).ToList();
                break;

            case PieceColor.Black:
                ComputerMove();
                break;
        }
    }

    async Task CopyPgnToClipboard()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", PgnText);
    }

    void OnCellClick(int file, int rank)
    {
        if (currentMove is null)
        {
            if (position.Board.Squares[file, rank]?.Color == PlayerColor)
            {
                currentMove = new Move
                {
                    From = (file, rank),
                };
            }
        }
        else
        {
            currentMove.To = (file, rank);

            var moveIndex = validMoves.ToList().FindIndex(x =>
                x.From.file == currentMove.From.file
                && x.From.rank == currentMove.From.rank
                && x.To.file == currentMove.To.file
                && x.To.rank == currentMove.To.rank);
            if (moveIndex >= 0)
            {
                MakeMove(moveIndex);
            }
            else
            {
                hint = "Error";
            }

            currentMove = null;
        }
    }

    void MakeMove(int moveIndex)
    {
        MakeMove(validMoves[moveIndex]);
    }

    void MakeMove(Move move)
    {
        var shortNotation = move.NotationVariants
            .First(x => validMoves.Count(y => y.NotationVariants.Contains(x)) == 1);
        notation.Add(shortNotation);

        var moves = position.Moves;
        moves.Add(move);
        position = Position.FromMoves(moves);
        validMoves.Clear();

        ComputerMove();
    }

    void ComputerMove()
    {
        Task.Run(() =>
        {
            var moves = position.Moves;
            var newPosition = Position.FromMoves(moves);
            validMoves = newPosition.GetMoves(PlayerColor.OpponentColor(), true, true);

            void OnProgressChange(object sender, FindMoveProgressEventArgs e)
            {
                progressCurrent = e.Current;
                progressTotal = e.Total;
                InvokeAsync(StateHasChanged);
            }
            newPosition.FindMoveProgress += OnProgressChange;
            var computerMove = newPosition.FindBestMoveAB(PlayerColor.OpponentColor(), aiLevel);
            newPosition.FindMoveProgress -= OnProgressChange;

            if (computerMove is not null)
            {
                moves = newPosition.Moves;
                moves.Add(computerMove);
                var shortNotation = computerMove.NotationVariants
                    .First(x => validMoves.Count(y => y.NotationVariants.Contains(x)) == 1);
                notation.Add(shortNotation);
                newPosition = Position.FromMoves(moves);
            }
            validMoves = newPosition.GetMoves(PlayerColor, true, true);
            position = newPosition;
            InvokeAsync(StateHasChanged);
        });
    }
}
